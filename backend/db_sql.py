import sqlite3
import datetime


def create_database(path):
    conn = sqlite3.connect(path)
    with conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS students_data(                    
                     name text,
                     surname text,
                     student_id text,
                     major text,
                     age text)""")
        conn.commit()
        c.execute("""SELECT COUNT(student_id)
                     FROM students_data""")
        # print("students data table was created...")


class Student:
    def __init__(self, name, surname, age, major, id_):
        self.name = name
        self.surname = surname
        self.major = major
        self.id = id_
        self.age = age


# There is need to make all the database info case-insensitive all infor lower cases in display names can initial
# capitalized
class StudentManagement:
    """The class consist of all the functions that have to do with all student maintaining systems
    On class initialization it connects to the students' database table if not available it creates one
    as defined in the __init__
    The concept behind the system is based on the idea that every student must only pass in their personal
    details and the system must assign the student a school ID which is generated based on 4 factors. (1)major,
    (2)year of enrollment, (3) number of students currently enrolled and in the database, (4) age of student this
    guarantees that there are no Students ID that can never be duplicate ID that can be generated by add_student func
    """

    path_db = "backend/students_enrolled.db"

    def __init__(self):
        self.conn = sqlite3.connect(StudentManagement.path_db)
        self.c = self.conn.cursor()
        self.number_of_students = self.get_students_count()
        # print(self.number_of_students)
        if self.number_of_students is None:
            create_database(StudentManagement.path_db)
            self.number_of_students = self.get_students_count()
    
    def id_gen(self, major, age):
        return f"{major[:2].upper()}{datetime.datetime.now().year}{1000 + self.number_of_students}{age}"

    # ##################################### ADDING STUDENT INTO DATA BASE #############################################
    def add_student(self, name, surname, major, age):
        # majors = ["Economics", "Biology", "Physics", "Electronic", "International Trade", "Computer Science"]
        
        if major[:6] != "Admin-":
            # verify if the given values do not exist in db
            student_detail = self.get_student_by_reals(name, surname, major, age)
            # Raised issue 1
            if student_detail:
                print(f"Failed to add {name} {surname} !Identical ID already exist as {student_detail}")
                return "Fail", f"Failed to add {name} {surname} \nAlready exist as {student_detail}"

            else:
                # Creating a student ID
                id_ = self.id_gen(major, age)   # f"{major[:2].upper()}{datetime.datetime.now().year}{1000 + self.number_of_students}{age}"
                # It is guaranteed no student ID duplicates will exist because of variable self.number_of_students in the id
                # ADD STUDENT INTO DATA BASE
                with self.conn:
                    self.number_of_students += 1
                    self.c.execute("""INSERT INTO students_data VALUES (:name, :surname, :id, :major, :age)""",
                                {'name': name.capitalize(), "surname": surname.capitalize(), "id": id_, "major":major, "age": age})
                    self.conn.commit()
                # Success Status 1
                # print(f"Student: {name} with ID {id_} added to database...")
                return "Success", f"{name} with ID {id_} added to database..."
                
        
        # In the case of the admin
        else:
            with self.conn:
                self.c.execute("""INSERT INTO students_data VALUES (:name, :surname, :id, :major, :age)""",
                                {'name': name.capitalize(), "surname": surname.capitalize(), "id": major, "major": "Admin", "age": age})
                
    # ######################################### GET STUDENT COUNT FROM DATABASE #######################################
    def get_students_count(self):
        """Returns the count as a number of students in the database when ever called and is tied to the __init__
        of the class as a way to identify if the database exist through self.number_of_students
        """
        try:
            self.c.execute("""SELECT COUNT(student_id)
                         FROM students_data""")
            return self.c.fetchone()[0] -1 # subtract the first row of admin
        except sqlite3.OperationalError:
            pass
            # Raised issue 2
            # print("Student data table does not exist...")

    # ######################################### OBTAINING STUDENT INFO USING ID #######################################
    def get_student_by_id(self, id_):
        """Returns a tuple with student info else returns None"""
        try:
            self.c.execute("""SELECT *
                              FROM students_data
                              WHERE student_id = :new_id""", {"new_id": id_})
            return self.c.fetchone()
        except sqlite3.OperationalError:
            pass  # All warnings of the file not existing will be reported by get_students_count() func

    # ####################################### DISPLAYING ALL REGISTERED STUDENTS ######################################
    def display_all(self):
        """Returns a list of tuples with the information of all the students currently in the database"""
        try:
            self.c.execute("""SELECT * FROM students_data
                              WHERE major <> 'Admin'""")
            return self.c.fetchall()
        except sqlite3.OperationalError:
            pass   # All warnings of the file not existing will be reported by get_students_count() func

    # ##################################### UPDATE STUDENT INFO FROM DATABASE ########################################
    def update_student(self, id_, new_name, new_surname, new_major, new_age):
        # WE could let user enter only one parameter to be updated using parameter flag                  # Idea branch 1
        try:
            with self.conn:
                self.c.execute("""UPDATE students_data
                                  SET name = :newName, surname = :newSurname, major = :newMajor, age = :newAge
                                  WHERE student_id = :id""",
                               {"newName": new_name, "newSurname": new_surname, "newMajor": new_major,
                                "newAge": new_age,
                                "id": id_})
                self.conn.commit()

                # Updating student ID as it is related to major and age which could be changed when student updates info
                new_id = new_major[:2].upper() + id_[2:-2] + str(new_age)
                print(new_id)
                # existing_student = self.get_student_by_id(new_id)
                # if existing_student:                                                                 # Potential bug 1
                # In the case that ID conflicts or alteration on the ID concept which could create duplicates
                #     print(f"Failed to add {new_name} {new_surname} !Identical ID already exist as {existing_student}")
                # else:
                self.c.execute("""UPDATE students_data
                                  SET student_id = :new_id
                                  WHERE student_id = :old_id""", {"new_id": new_id, "old_id": id_})
                self.conn.commit()
                # Success Status 2
                print("Update success")
        except sqlite3.OperationalError:
            pass

    # ##################################### DELETING STUDENT FROM DATABASE ###########################################
    def delete_student(self, id_):
        """Returns Nothing simply deletes the student data in database"""
        try:
            if self.get_student_by_id(id_):
                with self.conn:
                    self.c.execute("""DELETE FROM students_data
                                      WHERE student_id = ?""", (id_,))
                    self.conn.commit()
                    self.c.execute("REINDEX students_data")
                    self.conn.commit()
                # Success Status 3
                print(f"Deleted student id: '{id_}'")
            else:
                # Raised issue 3
                print(f"student with id {id_} not found...")
        except sqlite3.OperationalError:
            pass

    # ################################ GET STUDENT BY REAL NAMES AND AGE FROM DATABASE #################################
    def get_student_by_reals(self, name, surname, major, age):
        """Returns a tuple with student information else returns None"""
        try:
            with self.conn:
                self.c.execute("""SELECT *
                                     FROM students_data
                                     WHERE name = :name and surname = :surname and age = :age and major = :major""",
                               {"name": name, "surname": surname, "age": age, "major": major})
                student_detail = self.c.fetchone()
            return student_detail
        except sqlite3.OperationalError:
            pass   # All warnings of the file not existing will be reported by get_students_count() func

    # ############################################### CLEARING DATABASE ###############################################
    def clear_students_db(self):
        try:
            with self.conn:
                self.conn.execute("DROP TABLE students_data")
            # Success Status 4
            print("All student data was deleted...")
        except sqlite3.OperationalError:
            pass  # All warnings of the file not existing will be reported by get_students_count() func

    # ############################### DISPLAY STUDENTS IN SPECIFIED MAJOR FROM DATABASE ###############################
    def major(self, major):
        """Returns a list of tuples with each student details else returns None"""
        try:
            with self.conn:
                self.c.execute("""SELECT * 
                                     FROM students_data
                                     WHERE major = ?""", (major,))
                return self.c.fetchall()
        except sqlite3.OperationalError:
            pass

    # ############################# DISPLAY EACH MAJOR AND STUDENT COUNT FROM DATABASE ################################
    def display_major_counts(self):
        """Returns a list of tuples each with the subject name in the database and the number of students enrolled in
        that subject"""
        try:
            with self.conn:
                self.c.execute("""SELECT major, COUNT(major) as [Students Count]
                                  FROM students_data
                                  WHERE major <> 'Admin'
                                  group by major"""
                               )
                return self.c.fetchall()
        except sqlite3.OperationalError:
            pass  # All warnings of the file not existing will be reported by get_students_count() func

    # ###################################### GET ADMIN PASSWORD ON LOGIN #################################################
    def get_admin(self, name, paswd):
        """Returns the admin detail by logging in password"""
        with self.conn:
            self.c.execute("""SELECT * 
                               FROM students_data
                               where age = ? AND name = ?""", (paswd, name))
        return self.c.fetchone()
    

    def get_all_admin(self):
        """Returns all the admin detail by logging in password"""
        with self.conn:
            self.c.execute("""SELECT * 
                               FROM students_data
                               where major = 'Admin'""")
        return self.c.fetchall()



s1 = StudentManagement()

# s1.delete_student("Geography")
# print(s1.get_all_admin())
print(s1.display_major_counts())
# data = [list(i) for i in s1.display_all()]
# print(data)
# print(s1.get_admin("Hillary", '123'))
# UPDATE done
# DELETE 1 done
# DELETE ALL done
# DISPLAY STUDENTS IN PARTICULAR MAJOR done
# Display occupied majors and the count of students

# age_mismatch = False
# major_mismatch = False
# If new_age diff from db age the ID needs to be altered
# self.c.execute("""SELECT age FROM students_data
#                               WHERE student_id = ? AND age <> ?""", (id, new_age))  # Searching age mismatch
# # print(self.c.fetchone())
# if self.c.fetchone():  # mismatch found
#     print("age mismatch found")
# else:
#     print("continue...")

# print(StudentManagement().display_all())
# print(StudentManagement().major("International Trade"))
# print(StudentManagement().get_student_by_reals('Hillary', 'Mapodera', 'Philosophy', '24'))
# StudentManagement().delete_student("IN2023100027")
# StudentManagement().clear_students_db()
# print(StudentManagement().get_students_count())
# updating student
# StudentManagement().update_student('IN2023100027', 'Himel', 'Shafiq', "Electronics", 26)
# print(StudentManagement().get_students_count())
# print(StudentManagement().search_student_by_id('EL2023100026'))

# (1, 'Himel', 'Shafiq', 'IN2023100027', 'International Trade', '25')

# s1 = StudentManagement()
# s1.add_student("Hillary", "Mapondera", "Admin-FK786H70", "123")
# print(s1.display_all())
# s1.display_all()
# print(s1.get_student_by_reals("Hillary", "Mapondera", "Philosophy", 24))
# print(s1.display_all())


# print(s1.major("Philosophy"))
# print(s1.number_of_students)


# s1.add_student("Christine", "Hopper", "Computer Science", 24)
# s1.add_student("Yolanda", "Write", "Philosophy", 22)
# s1.add_student("Catherine", "Brownlee", "International Trade", 23)
# s1.add_student("Yvonne", "Conselio", "Economics", 24)
# s1.add_student("Thelma", "Brett", "Philosophy", 22)
# s1.add_student("Clement", "Peterson", "Biology", 23)
# s1.add_student("Francis", "Getch", "Economics", 24)
# s1.add_student("Prince", "Joe", "Philosophy", 22)
